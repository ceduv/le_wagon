{"ast":null,"code":"function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\n/**\n * jQuery Bar Rating Plugin v1.2.2\n *\n * http://github.com/antennaio/jquery-bar-rating\n *\n * Copyright (c) 2012-2016 Kazik Pietruszewski\n *\n * This plugin is available under the MIT license.\n * http://www.opensource.org/licenses/mit-license.php\n */\n(function (factory) {\n  if (typeof define === 'function' && define.amd) {\n    // AMD\n    define(['jquery'], factory);\n  } else if ((typeof module === \"undefined\" ? \"undefined\" : _typeof(module)) === 'object' && module.exports) {\n    // Node/CommonJS\n    module.exports = factory(require('jquery'));\n  } else {\n    // browser globals\n    factory(jQuery);\n  }\n})(function ($) {\n  var BarRating = function () {\n    function BarRating() {\n      var self = this; // wrap element in a wrapper div\n\n      var wrapElement = function wrapElement() {\n        var classes = ['br-wrapper'];\n\n        if (self.options.theme !== '') {\n          classes.push('br-theme-' + self.options.theme);\n        }\n\n        self.$elem.wrap($('<div />', {\n          'class': classes.join(' ')\n        }));\n      }; // unwrap element\n\n\n      var unwrapElement = function unwrapElement() {\n        self.$elem.unwrap();\n      }; // find option by value\n\n\n      var findOption = function findOption(value) {\n        if ($.isNumeric(value)) {\n          value = Math.floor(value);\n        }\n\n        return $('option[value=\"' + value + '\"]', self.$elem);\n      }; // get initial option\n\n\n      var getInitialOption = function getInitialOption() {\n        var initialRating = self.options.initialRating;\n\n        if (!initialRating) {\n          return $('option:selected', self.$elem);\n        }\n\n        return findOption(initialRating);\n      }; // get empty option\n\n\n      var getEmptyOption = function getEmptyOption() {\n        var $emptyOpt = self.$elem.find('option[value=\"' + self.options.emptyValue + '\"]');\n\n        if (!$emptyOpt.length && self.options.allowEmpty) {\n          $emptyOpt = $('<option />', {\n            'value': self.options.emptyValue\n          });\n          return $emptyOpt.prependTo(self.$elem);\n        }\n\n        return $emptyOpt;\n      }; // get data\n\n\n      var getData = function getData(key) {\n        var data = self.$elem.data('barrating');\n\n        if (typeof key !== 'undefined') {\n          return data[key];\n        }\n\n        return data;\n      }; // set data\n\n\n      var setData = function setData(key, value) {\n        if (value !== null && _typeof(value) === 'object') {\n          self.$elem.data('barrating', value);\n        } else {\n          self.$elem.data('barrating')[key] = value;\n        }\n      }; // save data on element\n\n\n      var saveDataOnElement = function saveDataOnElement() {\n        var $opt = getInitialOption();\n        var $emptyOpt = getEmptyOption();\n        var value = $opt.val();\n        var text = $opt.data('html') ? $opt.data('html') : $opt.text(); // if the allowEmpty option is not set let's check if empty option exists in the select field\n\n        var allowEmpty = self.options.allowEmpty !== null ? self.options.allowEmpty : !!$emptyOpt.length;\n        var emptyValue = $emptyOpt.length ? $emptyOpt.val() : null;\n        var emptyText = $emptyOpt.length ? $emptyOpt.text() : null;\n        setData(null, {\n          userOptions: self.options,\n          // initial rating based on the OPTION value\n          ratingValue: value,\n          ratingText: text,\n          // rating will be restored by calling clear method\n          originalRatingValue: value,\n          originalRatingText: text,\n          // allow empty ratings?\n          allowEmpty: allowEmpty,\n          // rating value and text of the empty OPTION\n          emptyRatingValue: emptyValue,\n          emptyRatingText: emptyText,\n          // read-only state\n          readOnly: self.options.readonly,\n          // did the user already select a rating?\n          ratingMade: false\n        });\n      }; // remove data on element\n\n\n      var removeDataOnElement = function removeDataOnElement() {\n        self.$elem.removeData('barrating');\n      }; // return current rating text\n\n\n      var ratingText = function ratingText() {\n        return getData('ratingText');\n      }; // return current rating value\n\n\n      var ratingValue = function ratingValue() {\n        return getData('ratingValue');\n      }; // build widget and return jQuery element\n\n\n      var buildWidget = function buildWidget() {\n        var $w = $('<div />', {\n          'class': 'br-widget'\n        }); // create A elements that will replace OPTIONs\n\n        self.$elem.find('option').each(function () {\n          var val, text, html, $a;\n          val = $(this).val(); // create ratings - but only if val is not defined as empty\n\n          if (val !== getData('emptyRatingValue')) {\n            text = $(this).text();\n            html = $(this).data('html');\n\n            if (html) {\n              text = html;\n            }\n\n            $a = $('<a />', {\n              'href': '#',\n              'data-rating-value': val,\n              'data-rating-text': text,\n              'html': self.options.showValues ? text : ''\n            });\n            $w.append($a);\n          }\n        }); // append .br-current-rating div to the widget\n\n        if (self.options.showSelectedRating) {\n          $w.append($('<div />', {\n            'text': '',\n            'class': 'br-current-rating'\n          }));\n        } // additional classes for the widget\n\n\n        if (self.options.reverse) {\n          $w.addClass('br-reverse');\n        }\n\n        if (self.options.readonly) {\n          $w.addClass('br-readonly');\n        }\n\n        return $w;\n      }; // return a jQuery function name depending on the 'reverse' setting\n\n\n      var nextAllorPreviousAll = function nextAllorPreviousAll() {\n        if (getData('userOptions').reverse) {\n          return 'nextAll';\n        } else {\n          return 'prevAll';\n        }\n      }; // set the value of the select field\n\n\n      var setSelectFieldValue = function setSelectFieldValue(value) {\n        // change selected option\n        findOption(value).prop('selected', true);\n        self.$elem.change();\n      }; // reset select field\n\n\n      var resetSelectField = function resetSelectField() {\n        $('option', self.$elem).prop('selected', function () {\n          return this.defaultSelected;\n        });\n        self.$elem.change();\n      }; // display the currently selected rating\n\n\n      var showSelectedRating = function showSelectedRating(text) {\n        // text undefined?\n        text = text ? text : ratingText(); // special case when the selected rating is defined as empty\n\n        if (text == getData('emptyRatingText')) {\n          text = '';\n        } // update .br-current-rating div\n\n\n        if (self.options.showSelectedRating) {\n          self.$elem.parent().find('.br-current-rating').text(text);\n        }\n      }; // return rounded fraction of a value (14.4 -> 40, 0.99 -> 90)\n\n\n      var fraction = function fraction(value) {\n        return Math.round(Math.floor(value * 10) / 10 % 1 * 100);\n      }; // remove all classes from elements\n\n\n      var resetStyle = function resetStyle() {\n        // remove all classes starting with br-*\n        self.$widget.find('a').removeClass(function (index, classes) {\n          return (classes.match(/(^|\\s)br-\\S+/g) || []).join(' ');\n        });\n      }; // apply style by setting classes on elements\n\n\n      var applyStyle = function applyStyle() {\n        var $a = self.$widget.find('a[data-rating-value=\"' + ratingValue() + '\"]');\n        var initialRating = getData('userOptions').initialRating;\n        var baseValue = $.isNumeric(ratingValue()) ? ratingValue() : 0;\n        var f = fraction(initialRating);\n        var $all, $fractional;\n        resetStyle(); // add classes\n\n        $a.addClass('br-selected br-current')[nextAllorPreviousAll()]().addClass('br-selected');\n\n        if (!getData('ratingMade') && $.isNumeric(initialRating)) {\n          if (initialRating <= baseValue || !f) {\n            return;\n          }\n\n          $all = self.$widget.find('a');\n          $fractional = $a.length ? $a[getData('userOptions').reverse ? 'prev' : 'next']() : $all[getData('userOptions').reverse ? 'last' : 'first']();\n          $fractional.addClass('br-fractional');\n          $fractional.addClass('br-fractional-' + f);\n        }\n      }; // check if the element is deselectable?\n\n\n      var isDeselectable = function isDeselectable($element) {\n        if (!getData('allowEmpty') || !getData('userOptions').deselectable) {\n          return false;\n        }\n\n        return ratingValue() == $element.attr('data-rating-value');\n      }; // handle click events\n\n\n      var attachClickHandler = function attachClickHandler($elements) {\n        $elements.on('click.barrating', function (event) {\n          var $a = $(this),\n              options = getData('userOptions'),\n              value,\n              text;\n          event.preventDefault();\n          value = $a.attr('data-rating-value');\n          text = $a.attr('data-rating-text'); // is current and deselectable?\n\n          if (isDeselectable($a)) {\n            value = getData('emptyRatingValue');\n            text = getData('emptyRatingText');\n          } // remember selected rating\n\n\n          setData('ratingValue', value);\n          setData('ratingText', text);\n          setData('ratingMade', true);\n          setSelectFieldValue(value);\n          showSelectedRating(text);\n          applyStyle(); // onSelect callback\n\n          options.onSelect.call(self, ratingValue(), ratingText(), event);\n          return false;\n        });\n      }; // handle mouseenter events\n\n\n      var attachMouseEnterHandler = function attachMouseEnterHandler($elements) {\n        $elements.on('mouseenter.barrating', function () {\n          var $a = $(this);\n          resetStyle();\n          $a.addClass('br-active')[nextAllorPreviousAll()]().addClass('br-active');\n          showSelectedRating($a.attr('data-rating-text'));\n        });\n      }; // handle mouseleave events\n\n\n      var attachMouseLeaveHandler = function attachMouseLeaveHandler($elements) {\n        self.$widget.on('mouseleave.barrating blur.barrating', function () {\n          showSelectedRating();\n          applyStyle();\n        });\n      }; // somewhat primitive way to remove 300ms click delay on touch devices\n      // for a more advanced solution consider setting `fastClicks` option to false\n      // and using a library such as fastclick (https://github.com/ftlabs/fastclick)\n\n\n      var fastClicks = function fastClicks($elements) {\n        $elements.on('touchstart.barrating', function (event) {\n          event.preventDefault();\n          event.stopPropagation();\n          $(this).click();\n        });\n      }; // disable clicks\n\n\n      var disableClicks = function disableClicks($elements) {\n        $elements.on('click.barrating', function (event) {\n          event.preventDefault();\n        });\n      };\n\n      var attachHandlers = function attachHandlers($elements) {\n        // attach click event handler\n        attachClickHandler($elements);\n\n        if (self.options.hoverState) {\n          // attach mouseenter event handler\n          attachMouseEnterHandler($elements); // attach mouseleave event handler\n\n          attachMouseLeaveHandler($elements);\n        }\n      };\n\n      var detachHandlers = function detachHandlers($elements) {\n        // remove event handlers in the \".barrating\" namespace\n        $elements.off('.barrating');\n      };\n\n      var setupHandlers = function setupHandlers(readonly) {\n        var $elements = self.$widget.find('a');\n\n        if (fastClicks) {\n          fastClicks($elements);\n        }\n\n        if (readonly) {\n          detachHandlers($elements);\n          disableClicks($elements);\n        } else {\n          attachHandlers($elements);\n        }\n      };\n\n      this.show = function () {\n        // run only once\n        if (getData()) return; // wrap element\n\n        wrapElement(); // save data\n\n        saveDataOnElement(); // build & append widget to the DOM\n\n        self.$widget = buildWidget();\n        self.$widget.insertAfter(self.$elem);\n        applyStyle();\n        showSelectedRating();\n        setupHandlers(self.options.readonly); // hide the select field\n\n        self.$elem.hide();\n      };\n\n      this.readonly = function (state) {\n        if (typeof state !== 'boolean' || getData('readOnly') == state) return;\n        setupHandlers(state);\n        setData('readOnly', state);\n        self.$widget.toggleClass('br-readonly');\n      };\n\n      this.set = function (value) {\n        var options = getData('userOptions');\n        if (self.$elem.find('option[value=\"' + value + '\"]').length === 0) return; // set data\n\n        setData('ratingValue', value);\n        setData('ratingText', self.$elem.find('option[value=\"' + value + '\"]').text());\n        setData('ratingMade', true);\n        setSelectFieldValue(ratingValue());\n        showSelectedRating(ratingText());\n        applyStyle(); // onSelect callback\n\n        if (!options.silent) {\n          options.onSelect.call(this, ratingValue(), ratingText());\n        }\n      };\n\n      this.clear = function () {\n        var options = getData('userOptions'); // restore original data\n\n        setData('ratingValue', getData('originalRatingValue'));\n        setData('ratingText', getData('originalRatingText'));\n        setData('ratingMade', false);\n        resetSelectField();\n        showSelectedRating(ratingText());\n        applyStyle(); // onClear callback\n\n        options.onClear.call(this, ratingValue(), ratingText());\n      };\n\n      this.destroy = function () {\n        var value = ratingValue();\n        var text = ratingText();\n        var options = getData('userOptions'); // detach handlers\n\n        detachHandlers(self.$widget.find('a')); // remove widget\n\n        self.$widget.remove(); // remove data\n\n        removeDataOnElement(); // unwrap the element\n\n        unwrapElement(); // show the element\n\n        self.$elem.show(); // onDestroy callback\n\n        options.onDestroy.call(this, value, text);\n      };\n    }\n\n    BarRating.prototype.init = function (options, elem) {\n      this.$elem = $(elem);\n      this.options = $.extend({}, $.fn.barrating.defaults, options);\n      return this.options;\n    };\n\n    return BarRating;\n  }();\n\n  $.fn.barrating = function (method, options) {\n    return this.each(function () {\n      var plugin = new BarRating(); // plugin works with select fields\n\n      if (!$(this).is('select')) {\n        $.error('Sorry, this plugin only works with select fields.');\n      } // method supplied\n\n\n      if (plugin.hasOwnProperty(method)) {\n        plugin.init(options, this);\n\n        if (method === 'show') {\n          return plugin.show(options);\n        } else {\n          // plugin exists?\n          if (plugin.$elem.data('barrating')) {\n            plugin.$widget = $(this).next('.br-widget');\n            return plugin[method](options);\n          }\n        } // no method supplied or only options supplied\n\n      } else if (_typeof(method) === 'object' || !method) {\n        options = method;\n        plugin.init(options, this);\n        return plugin.show();\n      } else {\n        $.error('Method ' + method + ' does not exist on jQuery.barrating');\n      }\n    });\n  };\n\n  $.fn.barrating.defaults = {\n    theme: '',\n    initialRating: null,\n    // initial rating\n    allowEmpty: null,\n    // allow empty ratings?\n    emptyValue: '',\n    // this is the expected value of the empty rating\n    showValues: false,\n    // display rating values on the bars?\n    showSelectedRating: true,\n    // append a div with a rating to the widget?\n    deselectable: true,\n    // allow to deselect ratings?\n    reverse: false,\n    // reverse the rating?\n    readonly: false,\n    // make the rating ready-only?\n    fastClicks: true,\n    // remove 300ms click delay on touch devices?\n    hoverState: true,\n    // change state on hover?\n    silent: false,\n    // supress callbacks when controlling ratings programatically\n    onSelect: function onSelect(value, text, event) {},\n    // callback fired when a rating is selected\n    onClear: function onClear(value, text) {},\n    // callback fired when a rating is cleared\n    onDestroy: function onDestroy(value, text) {} // callback fired when a widget is destroyed\n\n  };\n  $.fn.barrating.BarRating = BarRating;\n});","map":null,"metadata":{},"sourceType":"module"}